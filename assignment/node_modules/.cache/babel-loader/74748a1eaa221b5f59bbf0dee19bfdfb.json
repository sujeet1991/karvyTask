{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/MOHTML/assignment/src/component/organism/Home/index.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport Input from '../../molecules/input';\nimport { emailText, numberText, pwdText } from '../../../helper/method';\nimport { formSubmit } from '../../../store/Action/master';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ApiAll from '../../../services/loginApi';\nimport { withRouter, Redirect } from 'react-router-dom';\nlet api = new ApiAll();\n\nconst Landing = props => {\n  let dispatch = useDispatch();\n  let getState = useSelector(state => state.Auth.userInfo);\n  const [state, setState] = useState({\n    userName: \"\",\n    pwd: \"\",\n    Cpwd: \"\"\n  }); // form state\n\n  const [error, setError] = useState({});\n  const [emailCheck, setEmailCheck] = useState(null); // email or phone number bases on true false\n\n  const [userCheck, setUserCheck] = useState(null); // check existing user\n\n  const [msg, setMsg] = useState(''); // api false msg\n  // form onChange\n\n  const HandlerChange = (name, value) => {\n    let allState = { ...state\n    };\n\n    if (name === \"userName\") {\n      setEmailCheck(null);\n    }\n\n    allState[name] = value;\n    setState(allState);\n  };\n\n  useEffect(() => {\n    if (emailCheck !== null) {\n      let {\n        userName\n      } = state;\n      let payload = {\n        \"emailid\": emailCheck ? userName : \"\",\n        \"mobileno\": !emailCheck ? userName : \"\",\n        \"type\": emailCheck ? \"emailid\" : \"mobileno\"\n      };\n      api.userExist(payload).then(res => {\n        console.log(res, 'resData');\n\n        if (res.success) {\n          setUserCheck(true);\n          setMsg('');\n        } else {\n          setUserCheck(false);\n          setMsg(res.result);\n          setTimeout(function () {\n            setMsg('');\n          }, 1000);\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }, [emailCheck]);\n\n  const UserCheck = () => {\n    let {\n      userName\n    } = state;\n    let payload = {\n      \"emailid\": emailCheck ? userName : \"\",\n      \"mobileno\": !emailCheck ? userName : \"\",\n      \"type\": emailCheck ? \"emailid\" : \"mobileno\"\n    };\n    api.userExist(payload).then(res => {\n      console.log(res, 'resData');\n\n      if (res.success) {\n        setUserCheck(true);\n        setMsg('');\n      } else {\n        setUserCheck(false);\n        setMsg(res.result);\n        setTimeout(function () {\n          setMsg('');\n        }, 1000);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }; // blur function   \n\n\n  const validate = (name, value) => {\n    let type = name;\n    let errorMsg = { ...error\n    };\n\n    if (type === \"userName\") {\n      let emailCheck = false;\n\n      if (value === \"\") {\n        errorMsg['userNameError'] = \"Please enter email id/phone number\";\n      } else if (numberText(value)) {\n        if (value.length !== 10) {\n          errorMsg['userNameError'] = \"Please enter 10 digit phone number\";\n          emailCheck = null;\n        } else {\n          errorMsg['userNameError'] = \"\";\n          emailCheck = false;\n        }\n      } else {\n        let EmailCheck = emailText(value);\n\n        if (!EmailCheck) {\n          errorMsg['userNameError'] = \"Enter valid email id\";\n          emailCheck = null;\n        } else {\n          errorMsg['userNameError'] = \"\";\n          emailCheck = true;\n        }\n      }\n\n      setEmailCheck(emailCheck);\n      setError(errorMsg);\n    }\n\n    if (type === \"pwd\") {\n      if (value === \"\") {\n        errorMsg['pwdError'] = \"Please enter password\";\n      } else if (!pwdText(value)) {\n        errorMsg['pwdError'] = \"Entered password doesn't not match criteria \";\n      } else {\n        errorMsg['pwdError'] = \"\";\n      }\n\n      setError(errorMsg);\n    }\n\n    if (type === \"Cpwd\") {\n      if (value === \"\") {\n        errorMsg['CpwdError'] = \"Please enter password\";\n      } else if (!pwdText(value)) {\n        errorMsg['CpwdError'] = \"Entered password doesnt not match criteria\";\n      } else if (value !== state.pwd) {\n        errorMsg['CpwdError'] = \"Password and confirm password field should be match\";\n      } else {\n        errorMsg['CpwdError'] = \"\";\n      }\n\n      setError(errorMsg);\n    }\n  };\n\n  const FormValid = () => {\n    let isValid = false;\n    let errorMsg = { ...error\n    };\n    let {\n      userName,\n      pwd,\n      Cpwd\n    } = state;\n    let ECheck = emailText(userName);\n    let pwdcheck = pwdText(pwd);\n    let pwdcheck1 = pwdText(Cpwd);\n\n    if (userName === \"\") {\n      errorMsg['userNameError'] = \"Please enter email id/phone number\";\n    } else if (emailCheck && !ECheck) {\n      errorMsg['userNameError'] = \"Please enter valid email id\";\n    } else if (!emailCheck && userName.length !== 10) {\n      errorMsg['userNameError'] = \"Please enter valid email id/phone number\";\n    } else if (pwd === \"\") {\n      errorMsg['pwdError'] = \"Please enter password\";\n    } else if (!pwdcheck) {\n      errorMsg['pwdError'] = \"Entered password doesnt not match criteria\";\n    } else if (Cpwd === \"\") {\n      errorMsg['CpwdError'] = \"Please enter password\";\n    } else if (!pwdcheck1) {\n      errorMsg['CpwdError'] = \"Entered password doesnt not match criteria\";\n    } else if (pwd !== state.pwd) {\n      errorMsg['CpwdError'] = \"Password and confirm password field should be match\";\n    } else {\n      errorMsg['userNameError'] = \"\";\n      errorMsg['pwdError'] = \"\";\n      errorMsg['CpwdError'] = \"\";\n      isValid = true;\n    }\n\n    setError(errorMsg);\n    return isValid;\n  };\n\n  const submitbtn = () => {\n    let checkF = FormValid();\n\n    if (checkF) {\n      let payload = {\n        \"emailid\": emailCheck ? state.userName : \"\",\n        \"mobileno\": !emailCheck ? state.userName : \"\",\n        \"type\": emailCheck ? \"emailid\" : \"mobileno\",\n        \"password\": state.Cpwd\n      };\n      dispatch(formSubmit(payload));\n    }\n  };\n\n  if (getState.pageSuccess) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/Detail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 12\n      }\n    }); // console.log(getStata,'getStata')\n  }\n\n  console.log(msg, 'MSG');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    id: \"contact\",\n    action: \"\",\n    method: \"post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  }, \"Login\"), /*#__PURE__*/React.createElement(Input, {\n    label: \"EmailID / Phone\",\n    type: \"text\",\n    name: \"userName\",\n    value: state.userName,\n    onChange: HandlerChange,\n    validate: validate,\n    error: error['userNameError'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }\n  }), userCheck ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    label: \"Password\",\n    type: \"text\",\n    name: \"pwd\",\n    value: state.pwd,\n    onChange: HandlerChange,\n    validate: validate,\n    error: error['pwdError'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    label: \"Confirm Password\",\n    type: \"text\",\n    name: \"Cpwd\",\n    value: state.Cpwd,\n    onChange: HandlerChange,\n    validate: validate,\n    error: error['CpwdError'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 16\n    }\n  }, \"   Note:1Min: 1 lowercase and 1 uppercase alphabet \\u2022 Min: 1 number \\u2022 Min: 1 special character \\u2022 8-16 character length \\u2022 Shouldn\\u2019t be the same as username \\u2022 Shouldn\\u2019t be the same as last password\")) : null, msg !== \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n    class: \"alert alert-warning\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 27\n    }\n  }, msg) : null, /*#__PURE__*/React.createElement(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  }, getState.fStatus ? \"Please Wait\" : null, /*#__PURE__*/React.createElement(\"button\", {\n    name: \"submit\",\n    type: \"button\",\n    onClick: submitbtn,\n    id: \"contact-submit\",\n    \"data-submit\": \"...Sending\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 17\n    }\n  }, \"Submit\"))));\n};\n\nexport default withRouter(Landing);","map":{"version":3,"sources":["/Users/apple/Desktop/MOHTML/assignment/src/component/organism/Home/index.js"],"names":["React","useState","useEffect","Fragment","Input","emailText","numberText","pwdText","formSubmit","useSelector","useDispatch","ApiAll","withRouter","Redirect","api","Landing","props","dispatch","getState","state","Auth","userInfo","setState","userName","pwd","Cpwd","error","setError","emailCheck","setEmailCheck","userCheck","setUserCheck","msg","setMsg","HandlerChange","name","value","allState","payload","userExist","then","res","console","log","success","result","setTimeout","catch","UserCheck","validate","type","errorMsg","length","EmailCheck","FormValid","isValid","ECheck","pwdcheck","pwdcheck1","submitbtn","checkF","pageSuccess","fStatus"],"mappings":"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","sourcesContent":["import React,{useState,useEffect,Fragment} from 'react';\nimport Input from '../../molecules/input';\nimport {emailText,numberText,pwdText} from '../../../helper/method';\nimport {formSubmit} from '../../../store/Action/master';\nimport {useSelector, useDispatch} from 'react-redux';\nimport ApiAll from '../../../services/loginApi';\nimport {withRouter,Redirect} from 'react-router-dom';\nlet  api= new ApiAll();\n\nconst Landing=(props)=>{\n    let dispatch=useDispatch();\n    let getState=useSelector(state=>state.Auth.userInfo);\n    const [state,setState]=useState({userName:\"\",pwd:\"\",Cpwd:\"\"}) // form state\n    const [error,setError]=useState({});\n    const [emailCheck,setEmailCheck]=useState(null); // email or phone number bases on true false\n    const [userCheck,setUserCheck]=useState(null); // check existing user\n    const [msg,setMsg]=useState(''); // api false msg\n    \n\n    // form onChange\n    const HandlerChange=(name,value)=>{\n        let allState={...state}\n        if(name===\"userName\"){\n            setEmailCheck(null);\n        }\n        allState[name]=value\n        setState(allState)\n       }\n\n       useEffect(()=>{\n        if(emailCheck!==null ){\n            let {userName}=state;\n            let payload={    \n                \"emailid\":emailCheck?userName:\"\",\n                \"mobileno\": !emailCheck?userName:\"\",\n                \"type\": emailCheck?\"emailid\":\"mobileno\",\n            }\n            api.userExist(payload).then(res=>{\n                console.log(res,'resData')\n                if(res.success){\n                    setUserCheck(true)\n                    setMsg('')\n                }else{\n                    setUserCheck(false)\n                    setMsg(res.result)\n                    setTimeout(function(){ \n                        setMsg('')\n                    }, 1000);\n                }\n            }).catch(error=>{\n                console.log(error)\n            })\n        }\n       },[emailCheck])  \n       \n    const UserCheck=()=>{\n        let {userName}=state;\n            let payload={    \n                \"emailid\":emailCheck?userName:\"\",\n                \"mobileno\": !emailCheck?userName:\"\",\n                \"type\": emailCheck?\"emailid\":\"mobileno\",\n            }\n            api.userExist(payload).then(res=>{\n                console.log(res,'resData')\n                if(res.success){\n                    setUserCheck(true)\n                    setMsg('')\n                }else{\n                    setUserCheck(false)\n                    setMsg(res.result)\n                    setTimeout(function(){ \n                        setMsg('')\n                    }, 1000);\n                }\n            }).catch(error=>{\n                console.log(error)\n            })\n    }   \n\n    // blur function   \n    const validate=(name,value)=>{\n        let type =name;\n        let errorMsg={...error};\n        if(type===\"userName\"){\n            let emailCheck=false;\n            if(value===\"\"){\n                errorMsg['userNameError']=\"Please enter email id/phone number\"\n            }else if(numberText(value)){\n                if(value.length!==10){\n                    errorMsg['userNameError']=\"Please enter 10 digit phone number\";\n                    emailCheck=null;\n                }else{\n                    errorMsg['userNameError']=\"\";\n                    emailCheck=false;\n                }\n\n            }else{\n                let EmailCheck= emailText(value);\n                if(!EmailCheck){\n                    errorMsg['userNameError']=\"Enter valid email id\"\n                    emailCheck=null;\n                }else{\n                    errorMsg['userNameError']=\"\";\n                    emailCheck=true;\n                }\n            }\n            setEmailCheck(emailCheck)\n            setError(errorMsg)\n        }\n        if(type===\"pwd\"){\n            if(value===\"\"){\n                errorMsg['pwdError']=\"Please enter password\"\n            }else if(!pwdText(value)){\n                errorMsg['pwdError']=\"Entered password doesn't not match criteria \"\n            }else{\n                errorMsg['pwdError']=\"\";\n            }\n            setError(errorMsg)\n           \n        }   \n\n        if(type===\"Cpwd\"){\n            if(value===\"\"){\n                errorMsg['CpwdError']=\"Please enter password\"\n            }else if(!pwdText(value)){\n                errorMsg['CpwdError']=\"Entered password doesnt not match criteria\"\n            }\n            else if(value!==state.pwd){\n                errorMsg['CpwdError']=\"Password and confirm password field should be match\"   \n            }\n            else{\n                errorMsg['CpwdError']=\"\";\n            }\n            setError(errorMsg)\n        }\n        \n        \n    } \n \n const FormValid=()=>{\n     let isValid=false;\n     let errorMsg={...error};\n     let {userName,pwd,Cpwd}=state;\n     let ECheck= emailText(userName);\n    \n    let pwdcheck=pwdText(pwd);\n    let pwdcheck1=pwdText(Cpwd);\n      if(userName===\"\"){\n        errorMsg['userNameError']=\"Please enter email id/phone number\"\n      }else if(emailCheck && !ECheck){\n            errorMsg['userNameError']=\"Please enter valid email id\"\n        }\n       \n        else if(!emailCheck && userName.length!==10){\n            errorMsg['userNameError']=\"Please enter valid email id/phone number\"\n        }else if(pwd===\"\"){\n            errorMsg['pwdError']=\"Please enter password\"\n        }else if(!pwdcheck){\n            errorMsg['pwdError']=\"Entered password doesnt not match criteria\"\n        }\n        else if(Cpwd===\"\"){\n            errorMsg['CpwdError']=\"Please enter password\"\n        }else if(!pwdcheck1){\n            errorMsg['CpwdError']=\"Entered password doesnt not match criteria\"\n        }else if(pwd!==state.pwd){\n            errorMsg['CpwdError']=\"Password and confirm password field should be match\"   \n        }else{\n            errorMsg['userNameError']=\"\";\n            errorMsg['pwdError']=\"\";\n            errorMsg['CpwdError']=\"\";\n            isValid=true;\n        }\n        setError(errorMsg)\n        return isValid\n\n}  \n   \n    \n  const submitbtn=()=>{\n      let checkF=FormValid();\n      if(checkF){\n          let payload=\n            {    \n                \"emailid\": emailCheck?state.userName:\"\",\n                \"mobileno\":!emailCheck?state.userName:\"\",\n                \"type\": emailCheck?\"emailid\":\"mobileno\",\n                \"password\": state.Cpwd            \n            }\n          \n        dispatch(formSubmit(payload))\n      }\n      \n  }   \n  if(getState.pageSuccess){\n    return <Redirect to=\"/Detail\" />\n     // console.log(getStata,'getStata')\n  }\nconsole.log(msg,'MSG')\n    return(\n        <div className=\"container\">  \n            <form id=\"contact\" action=\"\" method=\"post\">\n                <h3>Login</h3>\n               \n                <Input\n                    label=\"EmailID / Phone\"\n                    type='text'\n                    name=\"userName\"\n                    value={state.userName}\n                    onChange={HandlerChange}\n                    validate={validate}\n                    error={error['userNameError']}\n                />\n              {userCheck?\n              <Fragment> \n                 <Input\n                    label=\"Password\"\n                    type='text'\n                    name=\"pwd\"\n                    value={state.pwd}\n                    onChange={HandlerChange}\n                    validate={validate}\n                    error={error['pwdError']}\n                />\n                 <Input\n                    label=\"Confirm Password\"\n                    type='text'\n                    name=\"Cpwd\"\n                    value={state.Cpwd}\n                    onChange={HandlerChange}\n                    validate={validate}\n                    error={error['CpwdError']}\n                />\n               \n               \n               \n               <p>   Note:1Min: 1 lowercase and 1 uppercase alphabet\n                    •\tMin: 1 number\n                    •\tMin: 1 special character\n                    •\t8-16 character length\n                    •\tShouldn’t be the same as username\n                    •\tShouldn’t be the same as last password\n                    </p>\n                </Fragment> :null}\n                {msg!==\"\"?<div class=\"alert alert-warning\">{msg}</div>:null}\n                \n                <fieldset>\n                 {getState.fStatus?\"Please Wait\":null}   \n                <button name=\"submit\" type=\"button\" onClick={submitbtn} id=\"contact-submit\" data-submit=\"...Sending\">Submit</button>\n                </fieldset>\n            </form>\n            </div>\n    )\n}\nexport default withRouter(Landing)"]},"metadata":{},"sourceType":"module"}