{"ast":null,"code":"import { GET_MASTER, GET_MASTER_SUCCESS, GET_MASTER_PENDING, GET_PROFILE_PENDING, GET_PROFILE_SUCCESS, GET_PROFILE_FAILED } from '../store/Action/type';\nimport { takeLatest, call, put } from 'redux-saga/effects';\nimport Api from '../services/onboarding';\nlet getApi = new Api();\n\nasync function getFetch() {\n  let data = await getApi.getCommonMaster();\n  return data;\n}\n\nfunction* fetchUser() {\n  console.log('mastersaga');\n  let getData = yield call(getFetch);\n\n  if (getData.success) {\n    let data = getData.response.data;\n    yield put({\n      type: GET_MASTER_SUCCESS,\n      paylaod: data\n    });\n  } else {\n    let data = null;\n    yield put({\n      type: GET_MASTER_PENDING,\n      paylaod: data\n    });\n  }\n\n  console.log(getData, 'getData'); // getApi.getCommonMaster().then(result => {\n  //     console.log(result, 'callmastersaga')\n  // })\n}\n\nexport function* GetMaster() {\n  yield takeLatest(GET_MASTER, fetchUser);\n}\n\nasync function getprofile(res) {\n  let data = await getApi.GetProfileData(res);\n  return data;\n}\n\nfunction* profileCall(action) {\n  console.log('sagaprofile', action);\n  let {\n    payload\n  } = action;\n  console.log(payload, 'paylaodProfile');\n  let data = yield call(getprofile, payload);\n  let res = data.response;\n\n  if (data.success) {\n    //let res = data.response;\n    yield put({\n      type: GET_PROFILE_SUCCESS,\n      paylaod: res\n    });\n  } else {\n    //let res = []\n    yield put({\n      type: GET_PROFILE_FAILED,\n      paylaod: res\n    });\n  }\n\n  console.log(data, 'profilesaga'); //Api.GetProfileData()\n}\n\nexport function* getProfile() {\n  yield takeLatest(GET_PROFILE_PENDING, profileCall);\n}","map":{"version":3,"sources":["/Users/apple/Desktop/MOHTML/assignment/src/Saga/master.js"],"names":["GET_MASTER","GET_MASTER_SUCCESS","GET_MASTER_PENDING","GET_PROFILE_PENDING","GET_PROFILE_SUCCESS","GET_PROFILE_FAILED","takeLatest","call","put","Api","getApi","getFetch","data","getCommonMaster","fetchUser","console","log","getData","success","response","type","paylaod","GetMaster","getprofile","res","GetProfileData","profileCall","action","payload","getProfile"],"mappings":"AAEA,SAASA,UAAT,EAAqBC,kBAArB,EAAyCC,kBAAzC,EAA6DC,mBAA7D,EAAkFC,mBAAlF,EAAuGC,kBAAvG,QAAiI,sBAAjI;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,OAAOC,GAAP,MAAgB,wBAAhB;AACA,IAAIC,MAAM,GAAG,IAAID,GAAJ,EAAb;;AAEA,eAAeE,QAAf,GAA0B;AACtB,MAAIC,IAAI,GAAG,MAAMF,MAAM,CAACG,eAAP,EAAjB;AACA,SAAOD,IAAP;AACH;;AAED,UAAUE,SAAV,GAAsB;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,MAAIC,OAAO,GAAG,MAAMV,IAAI,CAACI,QAAD,CAAxB;;AACA,MAAIM,OAAO,CAACC,OAAZ,EAAqB;AACjB,QAAIN,IAAI,GAAGK,OAAO,CAACE,QAAR,CAAiBP,IAA5B;AACA,UAAMJ,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAEnB,kBAAR;AAA4BoB,MAAAA,OAAO,EAAET;AAArC,KAAD,CAAT;AAEH,GAJD,MAIO;AACH,QAAIA,IAAI,GAAG,IAAX;AACA,UAAMJ,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAElB,kBAAR;AAA4BmB,MAAAA,OAAO,EAAET;AAArC,KAAD,CAAT;AACH;;AACDG,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ,EAAqB,SAArB,EAXkB,CAYlB;AACA;AACA;AACH;;AAED,OAAO,UAAUK,SAAV,GAAsB;AACzB,QAAMhB,UAAU,CAACN,UAAD,EAAac,SAAb,CAAhB;AACH;;AAED,eAAeS,UAAf,CAA0BC,GAA1B,EAA+B;AAC3B,MAAIZ,IAAI,GAAG,MAAMF,MAAM,CAACe,cAAP,CAAsBD,GAAtB,CAAjB;AACA,SAAOZ,IAAP;AACH;;AAGD,UAAUc,WAAV,CAAsBC,MAAtB,EAA8B;AAC1BZ,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BW,MAA3B;AACA,MAAI;AAAEC,IAAAA;AAAF,MAAcD,MAAlB;AACAZ,EAAAA,OAAO,CAACC,GAAR,CAAYY,OAAZ,EAAqB,gBAArB;AACA,MAAIhB,IAAI,GAAG,MAAML,IAAI,CAACgB,UAAD,EAAaK,OAAb,CAArB;AACA,MAAIJ,GAAG,GAAGZ,IAAI,CAACO,QAAf;;AACA,MAAIP,IAAI,CAACM,OAAT,EAAkB;AACd;AACA,UAAMV,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAEhB,mBAAR;AAA6BiB,MAAAA,OAAO,EAAEG;AAAtC,KAAD,CAAT;AACH,GAHD,MAGO;AACH;AACA,UAAMhB,GAAG,CAAC;AAAEY,MAAAA,IAAI,EAAEf,kBAAR;AAA4BgB,MAAAA,OAAO,EAAEG;AAArC,KAAD,CAAT;AACH;;AACDT,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAAkB,aAAlB,EAb0B,CAc1B;AACH;;AAID,OAAO,UAAUiB,UAAV,GAAuB;AAC1B,QAAMvB,UAAU,CAACH,mBAAD,EAAsBuB,WAAtB,CAAhB;AACH","sourcesContent":["\n\nimport { GET_MASTER, GET_MASTER_SUCCESS, GET_MASTER_PENDING, GET_PROFILE_PENDING, GET_PROFILE_SUCCESS, GET_PROFILE_FAILED } from '../store/Action/type';\nimport { takeLatest, call, put } from 'redux-saga/effects';\nimport Api from '../services/onboarding';\nlet getApi = new Api();\n\nasync function getFetch() {\n    let data = await getApi.getCommonMaster();\n    return data\n}\n\nfunction* fetchUser() {\n    console.log('mastersaga')\n    let getData = yield call(getFetch);\n    if (getData.success) {\n        let data = getData.response.data;\n        yield put({ type: GET_MASTER_SUCCESS, paylaod: data })\n\n    } else {\n        let data = null;\n        yield put({ type: GET_MASTER_PENDING, paylaod: data })\n    }\n    console.log(getData, 'getData')\n    // getApi.getCommonMaster().then(result => {\n    //     console.log(result, 'callmastersaga')\n    // })\n}\n\nexport function* GetMaster() {\n    yield takeLatest(GET_MASTER, fetchUser);\n}\n\nasync function getprofile(res) {\n    let data = await getApi.GetProfileData(res);\n    return data\n}\n\n\nfunction* profileCall(action) {\n    console.log('sagaprofile', action)\n    let { payload } = action;\n    console.log(payload, 'paylaodProfile')\n    let data = yield call(getprofile, payload);\n    let res = data.response;\n    if (data.success) {\n        //let res = data.response;\n        yield put({ type: GET_PROFILE_SUCCESS, paylaod: res })\n    } else {\n        //let res = []\n        yield put({ type: GET_PROFILE_FAILED, paylaod: res })\n    }\n    console.log(data, 'profilesaga')\n    //Api.GetProfileData()\n}\n\n\n\nexport function* getProfile() {\n    yield takeLatest(GET_PROFILE_PENDING, profileCall)\n}"]},"metadata":{},"sourceType":"module"}